class Pentestenv
  # Pentest-env Instance
  class Instance
    attr_reader :name

    def initialize(vagrant_config, name, base, type, customization = {})
      @logger = Log4r::Logger.new('vagrant::pentest-env/instance')
      @logger.info("Initializing #{type} `#{name}`")
      @custom = customization
      @config = vagrant_config
      @name = name
      @type = type
      @icustom = {}
      @icustom = @custom[@name] if @custom.include? @name
      @icustom['name'] = @name
      @path = instance_path(base)
      raise ArgumentError, "#{@type} `#{base}` not found." unless @path
    end

    def register
      @logger.info("Registering #{@type} `#{@name}`")
      load @path
      send(@type, @config, @icustom)
    end

    private

    def instance_path(instance)
      instance_path = false
      default_path = File.expand_path("../../#{@type}s/#{instance}.rb",
                                      File.dirname(__FILE__))
      custom_path = File.expand_path("#{instance}.rb",
                                     @custom[@type + 's_path'])

      if @custom.key?("#{@type}s_path") \
         && !@custom["#{@type}s_path"].empty? \
         && File.exist?(custom_path)
        instance_path = custom_path
      elsif File.exist?(default_path)
        instance_path = default_path
      end

      @logger.debug("#{@type.capitalize} path is `#{instance_path}`")
      instance_path
    end
  end
end
